titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
print(i+2)
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
radar_frame
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>% mutate(KDA = scale(KDA), pbr = scale(pbr), winr = scale(winr))
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats <- leaguedf %>%
group_by(Tier) %>% mutate(KDA = scale(KDA), pbr = scale(pbr), winr = scale(winr)) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
print(i+2)
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
radar_frame
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>%
mutate(KDA = scale(KDA), pbr = scale(pbr), winr = scale(winr)) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,0.1), wr=c(0,0.1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>%
mutate(KDA = scale(KDA), pbr = scale(pbr), winr = scale(winr)) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,5), wr=c(0,5)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>%
mutate(KDA = scale(KDA), pbr = scale(pbr), winr = scale(winr)) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
caxislabels=c(),
color = colors[i], title = titles[i]
)
}
par(op)
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
color = colors[i], title = titles[i]
)
} #TODO: FIgure out why its wrong
par(op)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ drv)
setwd('C:\Users\bobby\Coding\School\STOR 320\STOR-320-Group-13')
setwd('.\Users\bobby\Coding\School\STOR 320\STOR-320-Group-13')
setwd('./Users/bobby/Coding/School/STOR 320/STOR-320-Group-13')
setwd('Users/bobby/Coding/School/STOR 320/STOR-320-Group-13')
getwd()
setwd(../../)
setwd('../../')
getwd()
setwd('Coding/School/STOR 320/STOR-320-Group-13')
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(reprtree)
install.packages('reprtree')
devtools::install_github('araastat/reprtree')
devtools::install_github('araastat/reprtree')
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(reprtree)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
leaguedf <- read_csv('../data_sets/S13LeagueOfLegendsData.csv', col_types=cols()) %>%
select(c(5, 8, 10, 11, 12)) %>%
rename(winr = "Win %", pick = 'Pick %', ban = 'Ban %') %>%
mutate(pbr = pick + ban) %>%
select(-c(3,4))
head(leaguedf, 5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(reprtree)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
leaguedf <- read_csv('../data_sets/S13LeagueOfLegendsData.csv', col_types=cols()) %>%
select(c(5, 8, 10, 11, 12)) %>%
rename(winr = "Win %", pick = 'Pick %', ban = 'Ban %') %>%
mutate(pbr = pick + ban) %>%
select(-c(3,4))
head(leaguedf, 5)
leaguedf$Tier <- factor(leaguedf$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
plot1 <- ggplot(data=leaguedf) +
geom_boxplot(mapping = aes(x = Tier, y=winr, fill=Tier)) +
ggtitle('Win Rate and Tier') +
ylab('Win Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="BuPu")
plot2 <- ggplot(data = leaguedf) +
geom_boxplot(mapping = aes(x= Tier, y=pbr, fill=Tier)) +
ggtitle('Pick/Ban Rate and Tier') +
ylab('Pick/Ban Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="Dark2")
grid.arrange(plot1, plot2, ncol=2)
ggplot(data=leaguedf) +
geom_bar(mapping=aes(x=Tier, fill=Tier)) +
scale_fill_brewer('viridis') +
theme(legend.position = 'none') + ylab("Number of Observations")
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
color = colors[i], title = titles[i]
)
} #TODO: FIgure out why its wrong
par(op)
set.seed(27)
# Split the data into test/train. We want 75% for training, and 25% for testing.
inTrain <- createDataPartition(y=leaguedf$Tier, p=0.75, list=FALSE)
leagueTrain <- leaguedf[ inTrain, ]
leagueTest <- leaguedf[ -inTrain, ]
#Verify we did it correct, 0.75*5637 is approx 4225
nrow(leagueTrain)
#Now we start the creation of the models, we chose K-nearest-neighbors, random-forest, and .... stuff
#NOTE PLEASE TRAIN MODELS IN SEPERATE FILE, SAVE AND IMPORT HERE. TRAINING HERE MAKES KNITTING THE RMD FILE TAKE A LONG TIME.
rf_fit <- train(as.factor(Tier) ~ .,
data = leagueTrain,
method="ranger")
rf_fit
rf_pred <- predict(rf_fit, leagueTest)
confusionMatrix(rf_pred, as.factor(leagueTest$Tier))
reprtree:::plot.getTree(rf_fit)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(rattle)
install.packages('rattle')
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(rattle)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
fancyRpartPlot(rf_fit$finalModel)
#Now we start the creation of the models, we chose K-nearest-neighbors, random-forest, and .... stuff
#NOTE PLEASE TRAIN MODELS IN SEPERATE FILE, SAVE AND IMPORT HERE. TRAINING HERE MAKES KNITTING THE RMD FILE TAKE A LONG TIME.
rf_fit <- train(as.factor(Tier) ~ .,
data = leagueTrain,
method="rpart")
rf_fit
#Now we start the creation of the models, we chose K-nearest-neighbors, random-forest, and .... stuff
#NOTE PLEASE TRAIN MODELS IN SEPERATE FILE, SAVE AND IMPORT HERE. TRAINING HERE MAKES KNITTING THE RMD FILE TAKE A LONG TIME.
rf_fit <- train(as.factor(Tier) ~ .,
data = leagueTrain,
method="rf")
rf_fit
rf_pred <- predict(rf_fit, leagueTest)
confusionMatrix(rf_pred, as.factor(leagueTest$Tier))
fancyRpartPlot(rf_fit$finalModel)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(rplot.plot)
install.packages('rplot.plot')
install.packages('rplot')
library(fmsb)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
View(leaguedf)
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100))
Boundaryfd$Tier <- predict(rf_fit, Boundarydf)
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundaryfd$Tier <- predict(rf_fit, Boundarydf)
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leadguedf %>%
ggplot(aes=(x=winr, y=pbr, fill= Tier)) + geom_raster(data=boundarydf, alpha=0.5) + geom_point(shape=21, size=3) + theme_minimal()
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leadguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=boundarydf, alpha=0.5) + geom_point(shape=21, size=3) + theme_minimal()
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=boundarydf, alpha=0.5) + geom_point(shape=21, size=3) + theme_minimal()
Boundarydf = expand.grid(winr = seq(1, 5, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, size=3) + theme_minimal()
Boundarydf = expand.grid(winr = seq(0, 1, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, size=3) + theme_minimal()
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, size=KDA) + theme_minimal + xlab('Win Rate') + ylab('Pick Ban Rate')
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA)) + theme_minimal + xlab('Win Rate') + ylab('Pick Ban Rate')
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA)) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate')
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.25) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate')
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate')
leaguedf %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot for RF Model pre-hypetuning')
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as_tibble(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as_tibble(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill= Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=unique(leaguedf$Tier)) +
scale_y_discrete(labels=unique(leaguedf$Tier))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as_tibble(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill= n)) +
geom_tile() + geom_text(aes(label=n)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=unique(leaguedf$Tier)) +
scale_y_discrete(labels=unique(leaguedf$Tier))
View(plt)
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill= n)) +
geom_tile() + geom_text(aes(label=n)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=) +
scale_y_discrete(labels=unique(leaguedf$Tier))
View(plt)
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill= n)) +
geom_tile() + geom_text(aes(label=n)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God'))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Fred)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God'))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God'))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_x_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_y_discrete(labels=c('God', 'S', 'A', 'B', 'C', 'D'))
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_x_discrete(labels=c('God', 'S', 'A', 'B', 'C', 'D'))
